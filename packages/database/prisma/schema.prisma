// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Color {
  w
  b
}

enum Result {
  LOST
  WON
  DRAW
  NOT_DECIDED_YET
}

enum GameStatus {
  NOT_STARTED
  ABONDONED
  ENDED
  IN_PROGRESS
  TIMED_OUT
  PLAYER_EXIT
}

model User {
  id String @id @default(uuid())
  username String
  password Password?
  name String?
  rating Int @default(100)
  email String
  appTheme String?
  emailVerified DateTime?
  avatar String?
  provider Provider @default(CREDENTIAL)
  providerId String?
  refreshToken String?
  accessToken String?
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String?
  sessionState String?

  createdAt DateTime @default(now())
  player Player[]
  friends Friend[]
  sessions Session[]

  @@unique([email])
  @@unique([username])
  @@index([rating])
}

// We declare the password model separately to avoid leaking 
// user's password hash
model Password {
  hash String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String 

  @@unique([user_id])
}

model Friend {
  id Int @id() @default(autoincrement())

  userId String
  username String
  avatar String?
  email String
  matches Int[]
  won Int[]
  lastMatchPlayed DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Player {
  id String @id @default(cuid())
  color Color
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  game Game @relation(fields: [gameId], references: [uid], onDelete: Cascade)
  gameId String
  finishedGame Boolean @default(false)
  result Result @default(NOT_DECIDED_YET)
  moves Move[]
  gameToken String @db.Text

  accessToken String?
  
  @@unique([userId,gameId])
  @@unique([color,gameId])
  @@index([userId])
}

model Game {
  id Int @id @default(autoincrement())
  uid String 
  players Player[]
  createdAt DateTime @default(now())
  startedAt DateTime?
  endedAt DateTime?
  metadata Json?
  moves Move[]
  plays String[]
  currentState String @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1")
  status GameStatus

  @@unique([uid])
  @@index([status])
}

model Move {
  id String @id @default(cuid())
  game Game @relation(fields: [gameId],references: [uid], onDelete: Cascade)
  gameId String
  beforeState String
  afterState String
  move String
  playedAt DateTime @default(now())
  playedBy Player @relation(fields: [playerId],references: [id])
  playerId String
  desc String?
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Provider {
  CREDENTIAL
  GOOGLE
}